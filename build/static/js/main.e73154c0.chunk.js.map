{"version":3,"sources":["components/Select/SelectEvent.js","components/Select/index.js","App.js","serviceWorker.js","index.js"],"names":["props","empty","open","onClick","dropDown","className","clean","Select","state","inputValue","result","disable","itemId","selectError","data","this","setState","inp","value","focus","a","b","selected","e","itemsId","target","Object","keys","map","i","name","toLowerCase","indexOf","push","id","length","item","flag","children","key","includes","setValue","groupName","notFound","getListItem","label","autoFocus","ref","onChange","onChangeInput","placeholder","SelectEvent","cleanInput","getList","React","Component","defaultProps","App","useState","board","setBoard","Personal","Company","Niko","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e73154c0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function(props){\r\n\treturn <>{\r\n\t\tprops.empty \r\n\t\t?\r\n\t\t\tprops.open \r\n\t\t\t?\r\n\t\t\t\t<div onClick={props.dropDown} className=\"select-event open\"></div>\r\n\t\t\t:\r\n\t\t\t\t<div onClick={props.dropDown} className=\"select-event\"></div> \r\n\t\t: \r\n\t\t\t<div onClick={props.clean} className=\"select-event notempty\"></div>                             \r\n\t}</>\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport './main.css';\r\nimport SelectEvent from './SelectEvent';\r\n\r\nclass Select extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      dropDown: false,\r\n      inputValue: '',\r\n      result: '',\r\n      disable: this.props.disable,\r\n      itemId: [],\r\n      selectError: false,\r\n      data: this.props.data\r\n    }\r\n  }\r\n  dropDown(){\r\n    if(this.state.disable === false){\r\n      this.setState({ dropDown: !this.state.dropDown })\r\n    }\r\n  }\r\n  cleanInput(){\r\n    this.setState({\r\n      inputValue: '',\r\n      itemId: []\r\n    })\r\n    this.inp.value = '';\r\n    this.inp.focus();\r\n  }\r\n  setValue(a, b){\r\n    this.setState({inputValue: '', itemId: [], result: [a, b]});\r\n    this.dropDown();\r\n    this.props.selected(a);\r\n  }\r\n  onChangeInput(e){\r\n    let itemsId = [];\r\n    this.setState({inputValue: e.target.value, selectError: false});\r\n    if(!e.target.value){\r\n      this.setState({itemId: []});\r\n      return false;\r\n    }\r\n    Object.keys(this.state.data).map((a, i)=>{\r\n      return this.state.data[a].map((b)=>{\r\n       if( b.name.toLowerCase().indexOf(e.target.value.toLowerCase()) >= 0 ){\r\n          return itemsId.push(b.id)\r\n        }\r\n      })\r\n    })  \r\n    if(!itemsId.length){\r\n      this.setState({selectError: true});\r\n      return false;\r\n    }else{\r\n      this.setState({itemId: itemsId})\r\n    }\r\n  }\r\n  getListItem(item) {\r\n    let flag = false;\r\n      let children = (\r\n          this.state.data[item].map((i, key) =>{\r\n            if(!this.state.itemId.length){\r\n              flag = true;\r\n              return ( <li className=\"anim\" onClick={()=>{this.setValue(i.name, i.groupName)}} key={key} >{i.name}</li> );\r\n            }else{\r\n              if(this.state.itemId.includes(i.id)){\r\n                flag = true;\r\n                return ( <li className=\"anim\" onClick={()=>{this.setValue(i.name, i.groupName)}} key={key} >{i.name}</li> )\r\n              }\r\n            }\r\n          })\r\n      );\r\n    if(flag){\r\n      return (\r\n        <>\r\n          <li><strong>{item}</strong></li>\r\n          {children}\r\n        </>\r\n      );\r\n    }\r\n  }\r\n  getList(){\r\n    if(!this.state.selectError){\r\n      return Object.keys(this.state.data).map((a, i)=>{\r\n        return this.getListItem(a);                                \r\n      })\r\n    }else{\r\n      return ( <p className=\"notFound\">{this.props.notFound}</p> )\r\n    }\r\n  }\r\n  render(){\r\n    return(\r\n      <>\r\n        <div className=\"select-component\">\r\n          <span className=\"select-label\">{this.props.label}</span>\r\n            <div className={this.state.disable ? \"select-container disable\" : \"select-container\"} > \r\n              <div className=\"select-input\">\r\n              {\r\n                this.state.dropDown \r\n                ? \r\n                    <input\r\n                    autoFocus\r\n                    className=\"select-input-text\"\r\n                    ref={(inp)=>this.inp = inp}\r\n                    onChange={(e)=>{this.onChangeInput(e)}} />  \r\n                :\r\n                    <div onClick={()=>{this.dropDown()}} className=\"select-result\">\r\n                      {!this.state.result \r\n                      ? \r\n                        this.props.placeholder\r\n                      : \r\n                        <> { this.state.result[0] } <span className=\"group-label\">{this.state.result[1]}</span> </>\r\n                      }\r\n                    </div>\r\n              }\r\n                <SelectEvent clean={()=>this.cleanInput()} dropDown={()=>this.dropDown()} empty={!this.state.inputValue} open={this.state.dropDown}/>\r\n              </div>\r\n              { \r\n                (this.state.dropDown)\r\n                ?\r\n                  <div className=\"dropdown-list\">\r\n                    <ul>\r\n                    { this.getList() }\r\n                    </ul> \r\n                  </div>\r\n                :\r\n                  null\r\n              }\r\n            </div>\r\n        </div>\r\n\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nSelect.propTypes = {\r\n  data: PropTypes.object,\r\n  label: PropTypes.string\r\n};\r\nSelect.defaultProps = {\r\n  label: 'Label',\r\n  placeholder: 'Placeholder',\r\n  notFound: 'Try typing something else'\r\n};\r\n\r\nexport default Select;","import React, { useState } from 'react';\n\nimport Select from './components/Select';\n\nfunction App() {\n\tlet [board, setBoard] = useState('');\n\tlet data = {\n\t    Personal: [\n\t      {name: \"Goals\", id: \"003\", groupName: \"Personal\"},\n\t      {name: \"Daily\", id: \"004\", groupName: \"Personal\"},\n\t      {name: \"Production\", id: \"005\", groupName: \"Personal\"},\n\t      {name: \"Family\", id: \"006\", groupName: \"Personal\"},\n\t      {name: \"Films\", id: \"007\", groupName: \"Personal\"},\n\t      {name: \"To-do\", id: \"008\", groupName: \"Personal\"},\n\t      {name: \"Pet project\", id: \"009\", groupName: \"Personal\"},\n\t      {name: \"Startup\", id: \"010\", groupName: \"Personal\"},\n\t    ],\n\t    Company: [\n\t      {name: \"Daily\", id: \"011\", groupName: \"Company\"},\n\t      {name: \"Meetings\", id: \"012\", groupName: \"Company\"},\n\t      {name: \"Work\", id: \"013\", groupName: \"Company\"}\n\t    ],\n\t    Niko: [\n\t      {name: \"Daily\", id: \"014\", groupName: \"Niko\"},\n\t      {name: \"Work\", id: \"015\", groupName: \"Niko\"}\n\t    ]\n\t}\n  return (\n  \t<>\n      <Select \n      \tlabel=\"Select a board:\"\n      \tplaceholder=\"Select or type...\"\n      \tnotFound=\"Not found\"\n      \tselected={(a)=>{setBoard(a)}}\n      \tdisable={false}\n      \tdata = {data}\n      />\n      <p className=\"text-center\">{board}</p>\n     </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}